Модульная архитектура проекта

Исследование темы

https://habr.com/ru/company/ispring/blog/560074/
https://www.youtube.com/watch?v=xT25xiKqPcI

Про DTO
https://www.youtube.com/watch?v=gDEFVplbB4Q

symfony/serializer
symfony/validator


инструмент  symfony/console progressbar

Агрегаты

Подключение к бд
https://deworker.pro/edu/series/interactive-site/db-and-orm
db first - db - migrations - code
code first - code - migrations - db

Хорошие практики
https://github.com/adelf/acwa_book_ru
https://github.com/roistat/php-code-conventions

Принципы хорошего кода

- В коде не должны использоваться магические методы за исключением конструктора
- Нужно стремится к использованию принципов KISS, SOLID, DRY, GRASP
- Код должен обладать низкой связанностью
- Должен иметь минимальную цикломатическую сложность
- Код не должен содержать лишнего кода
- В качестве отсутствующего значения использовать null
- Названия boolean методов и переменных должны содержать глагол is, has или can
- Все методы класса по умолчанию должны быть private
- Параметры в методах должны следовать в следующем порядке: обязательные → часто используемые → редко используемые
- Nullable параметры должны быть помечены ?, даже если указано значение по умолчанию.
- Метод всегда должен возвращать только одну структуру данных (или null) или ничего не возвращать
- В больших методах возвращаемая переменная должна называться $result
- Интерфейсы имеют постфикс Interface
- Абстрактные классы имеют префикс Abstract
- Все свойства и константы класса по умолчанию должны быть private
- Методы и свойства в классе должны быть отсортированы по уровням видимости и по порядку использования сверху вниз public -> protected -> private
- Статические вызовы можно делать только у самого класса. У экземпляра можно обращаться только к его свойствам и методам
- Вынужденные хаки должны быть помечены комментариями
- При разработке прототипа допустимо помечать участки кода @todo
- В условном операторе должно проверяться исключительно boolean значение
- Использовать только $project === null сравнение
- Только один уровень отступа в методе, для этого разложить код на методы
- Не используйте Else
- Оберните все примитивные типы и строки в объекты - Объекты Значений (Value Objects)
- Только одна -> на строку
- Сохраняйте сущности короткими
- Не используйте статические функции
- чем меньше «магии» в коде, тем легче его читать и поддерживать
use Some;
$object = new Some\Object();


Слои внутри каждого модуля

- domain (модели, репозитории, сервисы, события)
- application
- infrastructure
- external dependencies


dependency inversion

create
read
update
delete

db

postgres sql

Инфраструктура как код

Конфигурация ОС
Конфигурация сторонних приложений
Конфигурация приложения
Приложение
Сеть

staging
test
production

Ansible
https://habr.com/ru/company/oleg-bunin/blog/431542/
Установка
https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-on-ubuntu

Свежий образ ansible
https://mirror.yandex.ru/debian-cd/current/amd64/iso-cd/

Основы DevOps - вхождение в проект с нуля
https://www.youtube.com/watch?v=YOaIg9By0fU&t=244s

https://habr.com/ru/company/oleg-bunin/blog/468537/

https://hamsterden.ru/ansible-install-setup/

modules
inventories
roles

Можно писать тесты на инфраструктуру
Получается нужно использовать виртуальную машину для локальной разработки и накатывать окружение с помощью ansible

Разворачиваем окружение в докер контейнер
docker pull debian:10

dockerfile если делать все руками, но идея так себе

FROM debian:10

RUN apt-get update
RUN apt-get install -y gnupg vim apt-transport-https lsb-release ca-certificates wget git nginx
RUN wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg
RUN sh -c 'echo "deb https://packages.sury.org/php/ $(lsb_release -sc) main" > /etc/apt/sources.list.d/php.list'
RUN apt-get update
RUN apt-get install -y php8.0 php8.0-cli php8.0-fpm php8.0-mcrypt php8.0-bz2 php8.0-mbstring php8.0-curl php8.0-intl php8.0-mysql php8.0-readline php8.0-xml php8.0-pgsql
COPY php-fpm/pool.d/ /etc/php/8.0/fpm/pool.d/
COPY php-fpm/php-fpm.conf /etc/php/8.0/fpm/php-fpm.conf
COPY nginx/conf.d /etc/nginx/conf.d
COPY nginx/conf.d/default.conf /etc/nginx/sites-available/default
RUN ln -s -f /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default

#RUN sh -c 'echo " deb http://apt.postgresql.org/pub/repos/apt/ buster-pgdg main " >> /etc/apt/sources.list.d/pgdg.list'
#RUN wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
#RUN apt-get update
#RUN apt-get -y install postgresql-13 postgresql-client-13
# RUN pg_ctlcluster 13 main start
#RUN su - postgres -c "psql -c 'CREATE USER pure WITH PASSWORD '\''test'\'';'"
#RUN su - postgres -c "psql -c 'CREATE DATABASE puredb OWNER pure;'"
#RUN su - postgres -c "psql -c 'GRANT ALL PRIVILEGES ON DATABASE puredb to pure;'"

#COPY postgresql/postgresql.conf /etc/postgresql/13/main/postgresql.conf
#COPY postgresql/pg_hba.conf /etc/postgresql/13/main/pg_hba.conf
# pg_ctlcluster 13 main status
STOPSIGNAL SIGQUIT
EXPOSE 80 9000

CMD infrastructure/development/docker/debian/cmd.sh

WORKDIR /pure

https://serveradmin.ru/sudo-ne-nuzhen-pri-rabote-v-konsoli-servera-tak-li-eto/

Debian GNU/Linux 10 (buster)


https://github.com/dylanaraps/neofetch

docker-compose run --rm php-cli composer require slim/slim
docker-compose run --rm php-cli composer install
docker-compose run --rm php-cli composer outdated --direct
docker-compose run --rm php-cli composer require slim/psr7
docker-compose run --rm php-cli composer require ramsey/uuid

 composer.lock

Задача команды composer update — обновить зависимости проекта до актуальных версий в соответствии с правилами,
записанными в composer.json при этом будет создан файл composer.lock

Задача команды composer install — установить зафиксированные зависимости проекта.

по умолчанию всегда и везде используем composer install.
Коммитим composer.lock в репозиторий.
Используем composer update только для намеренных обновлений.
При конфликте в composer.lock во время merge/rebase принимаем любую версию файла. Затем выполняем composer update, чтобы гарантированно получить composer.lock, соответствующий composer.json.


run slim framework
-------------------
// для создания экземляра приложения необходим обьект от интерфейса ResponseFactoryInterface
// использовать можно совершенно разные его реализации
class ResponseFactory implements \Psr\Http\Message\ResponseFactoryInterface
{
    public function createResponse(int $code = 200, string $reasonPhrase = ''): \Psr\Http\Message\ResponseInterface
    {
        return (new \Laminas\Diactoros\Response());
        //return (new \Slim\Psr7\Response());
    }
}

$responceFactory = new ResponseFactory();
//так же в объект могут перередаваться следующие компоненты
// container - контейнер внедрения зависимостей
// callableResolver - штука которая достает объекты из контейнера внедрения зависимостей
// routeCollector - Класс который занимается маршрутами
// routeResolver - Менеджер маршрутов
// middlewareDispatcher - Диспетчер промежуточного ПО
$application = new \Slim\App($responceFactory,
                    null,
                null,
                 null,
                  null,
            null
);

//\Slim\Factory\AppFactory::setSlimHttpDecoratorsAutomaticDetection(false);
//\Slim\Factory\ServerRequestCreatorFactory::setSlimHttpDecoratorsAutomaticDetection(false);

$application = \Slim\Factory\AppFactory::create();

$application->get('/', function ($request, $response) {
    echo '<pre>';
    print_r($request);
    $response->getBody()->write('124');
    return $response;
});

// сейчас у нас создан объект приложения, теперь требуется его запустить
$application->run();

//$app = \Slim\Factory\AppFactory::create();
-------------------
Минимум зависимостей.

psr стандарты

psr-7
psr/http-message

Общий набор интерфейсов, для написания фреймворко-независимого кода.

Как правило в любом приложении существуют два объекта Request и Response.

Сообщения
Заголовки
Тело сообщения
Запрос
Ответ

https://www.php-fig.org/psr/psr-7/
https://habr.com/ru/post/250343/
https://habr.com/ru/post/458484/
https://odan.github.io/2019/12/05/slim4-doctrine-dbal.html


https://github.com/php-fig/http-message

psr-17

PSR-17 описывает общий стандарт для фабрик, которые создают HTTP-объекты, совместимые с PSR-7.

Содержит рекомендации как создавать http объекты

psr-15
PSR-15: HTTP Server Request Handlers

RequestHandlerInterface
MiddlewareInterface
Спецификация данного стандарта описывает интерфейсы для обработчиков HTTP-запросов
и компонентов промежуточного программного обеспечения HTTP-сервера. то есть мидлваре

PSR-11: Container interface

https://github.com/PHP-DI/PHP-DI

Основная цель стандартизировать, как фреймворки и библиотеки будут использовать (DIC) контейнер для доступа к объектам и параметрам. Для этого был описан ContainerInterface.


// Database settings
$settings['db'] = [
    'driver' => 'pdo_pgsql',
    'host' => 'postgres',
    'dbname' => 'pure',
    'user' => 'alex',
    'password' => 'test',
    //'charset' => 'utf8_general_ci',
    //'collation' => 'utf8mb4_unicode_ci',
    'driverOptions' => [
        // Turn off persistent connections
        PDO::ATTR_PERSISTENT => false,
        // Enable exceptions
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
        // Emulate prepared statements
        PDO::ATTR_EMULATE_PREPARES => true,
        // Set default fetch mode to array
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    ],
];

$config = new \Doctrine\DBAL\Configuration();
$connectionParams = $settings['db'];

$connect = \Doctrine\DBAL\DriverManager::getConnection($connectionParams, $config);
$connectWrapper = $connect->getWrappedConnection();

$queryBuilder = $connect->createQueryBuilder();

echo "<pre>";
print_r($queryBuilder);

//https://odan.github.io/


Авторизация
https://habr.com/ru/post/539778/
https://github.com/php-casbin/php-casbin

Пишем доменный агрегат https://elisdn.ru/blog/104/domain-entities-modelling

Сначала пишем тесты, то есть внешние проектирование.
Для экономии ресурсов тестируйте только то что видно снаружи
Сделать собственные класс для исключений

REACT

Установка тестового приложения
устанавливаем через yarn
docker-compose run --rm node-cli yarn create react-app my-app
docker-compose exec node /bin/bash

Success! Created my-app at /pure/frontend/my-app
Inside that directory, you can run several commands:

  yarn start
    Starts the development server.

  yarn build
    Bundles the app into static files for production.ё

  yarn test
    Starts the test runner.

  yarn eject
    Removes this tool and copies build dependencies, configuration files
    and scripts into the app directory. If you do this, you can’t go back!

We suggest that you begin by typing:

  cd my-app
  yarn start

Happy hacking!
Done in 36.72s.

для девелоперрских пакетов
"devDependencies": {

},

docker-compose run --rm node-cli yarn install
docker-compose run --rm node-cli yarn upgrade @testing-library/react
docker-compose run --rm node-cli yarn upgrade @testing-library/user-event
docker-compose run --rm node-cli yarn upgrade web-vitals
docker-compose run --rm node-cli yarn add eslint --dev
docker-compose run --rm node-cli yarn run eslint --init
docker-compose run --rm node-cli yarn add stylelint stylelint-config-standard --dev
docker-compose run --rm node-cli yarn add eslint-plugin-prettier stylelint-prettier --dev
docker-compose run --rm node-cli yarn run prettier
docker-compose run --rm node-cli yarn add --dev --exact prettier
docker-compose run --rm node-cli yarn add --dev eslint-config-prettier

Папка build это корень для деплоя

Разделяем приложение на модули
https://deworker.pro/edu/series/interactive-site/react-test-lint 13.28

Модули делим по зонам ответственности
Gateway - общий шлюз куда попадают запросы в зависимости от их типа нужно написать отдельные контроллеры для каждого типа
- Http
- Cli
- Mobile
index-slim.php входной скрипт для использования slim framework, это публичная часть api

Тесты
Функциональные тесты проверяют контроллеры
Unit проверяют отдельные единицы
Приемочные тесты - это общие тесты, которые проверяют все приложение

composer install --no-dev
docker-compose run --rm php-cli composer require phpunit/phpunit --dev
